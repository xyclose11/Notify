@model IEnumerable<NoteApp.Models.Note>

<div class="row justify-content-sm-center p-0 mb-2 mt-2" id="noteViewTableContainer">

    <!-- Displays the categories -->

    <div class="dropdown-align-right p-0">
        <div class="form-floating mb-3 p-0">
            <select class="form-select" aria-label="Category Selector" id="categoryDropdown">
                <option></option>
            </select>
            <label for="categoryDropdown">Category</label>
            
        </div>
    </div>
        
    

    
    <table class="table-bordered table-hover table-striped">
        <thead>
        <tr>
            <th scope="col">Select</th>
            <th scope="col">Title</th>
            <th scope="col">Body</th>
            <th scope="col">Tags</th>
            <th scope="col">Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var note in Model)
        {
            <tr>
                <td>
                    <input class="form-check-input" value="" type="checkbox"/>
                </td>
                <td>@Html.DisplayFor(modelItem => note.Title)</td>
                <td>@Html.DisplayFor(modelItem => note.Body)</td>
                <td>
                        
                    @foreach (var noteTag in note.NoteTags)
                    {
                        <span class="badge rounded-pill text-black text-sm-center bg-primary">@Html.DisplayFor(modelItem => noteTag.Tag.Name)</span>
                    }
                    <!-- Add Tag to Note -->
                    <button data-bs-target="#addTagModal" data-bs-toggle="modal" type="button" class="btn" asp-action="Create" asp-controller="Tag">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
                        </svg>
                    </button>
                    <div class="modal fade" id="addTagModal" tabindex="-1" aria-labelledby="createTagModalLabel" aria-hidden="true" >
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="createTagModalLabel">Add Tag(s)</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">

                                </div>
                                <div class="modal-footer">
                                    <a class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#createTagCollapse">
                                        Create New Tag
                                    </a>
                                    <div class="collapse" id="createTagCollapse">
                                        <form action="/Tag/Create" method="post">
                                            <div class="mb-3">
                                                <label for="tagName" class="form-label">Name</label>
                                                <input type="text" id="tagName" class="form-control" name="Name" required/>
                                            </div>
                                            <div class="mb-3">
                                                <label for="tagDescription" class="form-label">Description</label>
                                                <input type="text" id="tagDescription" class="form-control" name="Description"/>
                                            </div>
                                            <button type="submit" class="btn btn-primary">Save</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </td>
                <td>These are actions</td>
            </tr>
        }
        </tbody>
    </table>

    <!-- Pagination -->
    <nav aria-label="Pagination">
        <ul class="pagination justify-content-center m-2" id="noteViewPagination">
        </ul>
    </nav>
</div>

<script>

// Table pagination
$(document).ready(function() {
    let currentPage = @ViewBag.CurrentPage;
    let totalPage = @ViewBag.TotalPages;
    let selectedCategory = localStorage.getItem("selectedCategory");

    // Generate GoToStart link
    let goToStart = $('<a>').addClass('pagination-link page-link').text('<<<');
    goToStart.attr('href', `/Note/GetNotes?view=Table&currentPage=${1}&category=${selectedCategory}`);

    let goToStartItem = $('<li>').addClass('page-item').append(goToStart);
    if (currentPage === 1) {
        goToStartItem.addClass('disabled');
    }

    // Generate Prev link
    let previousLink = $('<a>').addClass('pagination-link page-link').text('Previous');
    if (currentPage > 1) {
        previousLink.attr('href', `/Note/GetNotes?view=Table&currentPage=${currentPage - 1}&category=${selectedCategory}`);
    } else {
        previousLink.addClass('disabled');
    }
    let previousListItem = $('<li>').addClass('page-item').append(previousLink);

    // Generate left 2 links
    let leftLinks = [];
    for (let i = currentPage - 1; i >= currentPage - 2; i--) {
        if (i >= 1) {
            let pageLink = $('<a>').addClass('pagination-link page-link');
            pageLink.attr('href', `/Note/GetNotes?view=Table&currentPage=${i}&category=${selectedCategory}`);
            pageLink.text(i);

            let listItem = $('<li>').addClass('page-item');
            listItem.append(pageLink);
            leftLinks.unshift(listItem);
        }
    }

    // Generate current page link
    let currentLink;
    if (currentPage >= 1 || currentPage <= totalPage) {
        let pageLink = $('<a>').addClass('pagination-link page-link');
        pageLink.attr('href', `/Note/GetNotes?view=Table&currentPage=${currentPage}&category=${selectedCategory}`).text(currentPage);

        let listItem = $('<li>').addClass('page-item active disabled');
        listItem.append(pageLink);

        currentLink = listItem;
    }

    // Generate right 2 links
    let rightLinks = [];
    for (let i = currentPage + 1; i <= currentPage + 2; i++) {
        if (i <= totalPage) {
            let pageLink = $('<a>').addClass('pagination-link page-link');
            pageLink.attr('href', `/Note/GetNotes?view=Table&currentPage=${i}&category=${selectedCategory}`);
            pageLink.text(i);

            let listItem = $('<li>').addClass('page-item');
            listItem.append(pageLink);
            rightLinks.push(listItem);
        }
    }

    // Generate Next link
    let nextLink = $('<a>').addClass('pagination-link page-link').text('Next');
    if (currentPage < totalPage) {
        nextLink.attr('href', `/Note/GetNotes?view=Table&currentPage=${currentPage + 1}&category=${selectedCategory}`);
    } else {
        nextLink.addClass('disabled');
    }
    let nextListItem = $('<li>').addClass('page-item').append(nextLink);

    // Generate GoToEnd link
    let goToEnd = $('<a>').addClass('pagination-link page-link').text('>>>');
    goToEnd.attr('href', `/Note/GetNotes?view=Table&currentPage=${totalPage}&category=${selectedCategory}`);

    let goToEndItem = $('<li>').addClass('page-item').append(goToEnd);
    if (currentPage === totalPage) {
        goToEndItem.addClass('disabled');
    }

    // Append all the links to #noteViewPagination in the correct order
    $('#noteViewPagination').append(goToStartItem, previousListItem, leftLinks, currentLink, rightLinks, nextListItem, goToEndItem);
});


</script>

<script>
    $(document).ready(function () {
        getCategories();

    })

    function getCategories() {
        $.get('/Category/GetCategories', function (data) {
            // Assuming the id of your dropdown list is 'categoryDropdown'
            let dropdown = document.getElementById('categoryDropdown');

            // Clear any existing options
            dropdown.innerHTML = '';
            let option = document.createElement('option');
            option.value = "";
            option.text = "";
            dropdown.add(option);
            // Add an option for each category
            data.forEach(function(category) {
                let option = document.createElement('option');
                option.value = category.name;
                option.text = (category.name);
                dropdown.add(option);
            });
            
            // Set the selected category to the value in localStorage, if it exists
            var selectedCategory = localStorage.getItem('selectedCategory');
            if (selectedCategory) {
                dropdown.value = selectedCategory;
            }

        })
    }
    
    document.getElementById('categoryDropdown').addEventListener('change', function() {
        // When the selected category changes, store the new value in localStorage
        localStorage.setItem('selectedCategory', this.value);
        location.reload();
    });
</script>